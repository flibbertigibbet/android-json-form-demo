buildscript {
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath 'net.vrallev.gradle:jarjar-gradle:1.1.0'

        classpath 'com.github.flibbertigibbet.jsonschema2pojo:jsonschema2pojo-gradle-plugin:jsonschema2pojo-0.4.16-update-validation-api'
        //classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:0.4.16'
        // add additional dependencies here if you wish to reference instead of generate them (see example directory)
        classpath 'com.google.code.gson:gson:2.4'
        classpath 'org.joda:joda-convert:1.8.1'
        classpath 'javax.annotation:javax.annotation-api:1.2'
        classpath 'com.google.code.findbugs:jsr305:3.0.1'

        //optional
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
        classpath 'joda-time:joda-time:2.9.1'

    }
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'ant', module: 'ant'
    all*.exclude group: 'awtui', module: 'awtui'
    all*.exclude group: 'swingui', module: 'swingui'
}

apply plugin: 'net.vrallev.jarjar'
apply plugin: 'jsonschema2pojo'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    //useLibrary 'org.apache.http.legacy' // TODO: does this actually help?

    // UGH
    packagingOptions {
        exclude 'NOTICE'
        exclude 'NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        pickFirst 'META-INF/maven/commons-io/commons-io/pom.properties'
        pickFirst 'META-INF/maven/commons-io/commons-io/pom.xml'
        pickFirst 'META-INF/plexus/components.xml'
        exclude 'META-INF/INDEX.LIST'
        pickFirst 'META-INF/jdom-info.xml'
        pickFirst 'META-INF/services/org.apache.commons.weaver.spi.Weaver'
    }

    defaultConfig {
        applicationId "com.azavea.prs.driver"
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        // TODO: figure out dependencies
        multiDexEnabled false
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "3072M"
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    configurations {
        all*.exclude group: 'junit', module: 'junit'
        all*.exclude group: 'commons-logging', module: 'commons-logging'
    }

    //////////////////
    // for bean instrospection
    //compile 'com.github.flibbertigibbet:openbeans:v1.1'

    // another bean introspection lib
    //compile 'com.madrobot:madrobotbeans:0.1'

    // used by jsonschema2pojo, also used directly
    compile 'com.google.code.gson:gson:2.4'

    compile ('com.github.flibbertigibbet:jsonschema2pojo:jsonschema2pojo-0.4.16-update-validation-api') {
        // only want core
        exclude module: 'jsonschema2pojo-ant'
        exclude module: 'jsonschema2pojo-cli'
        exclude module: 'jsonschema2pojo-maven-plugin'
        exclude module: 'jsonschema2pojo-gradle-plugin'
        exclude module: 'jsonschema2pojo-integration-tests'

        exclude group: 'javax.validation', module: 'validation-api'
    }

    // used by jsonschema2pojo
    // Required if generating JSR-303 annotations
    compile 'javax.validation:validation-api:1.1.0.Final'

    // Required if generating equals, hashCode, or toString methods
    compile 'commons-lang:commons-lang:2.6'
    // Required if generating JodaTime data types
    compile 'joda-time:joda-time:2.9.1'
    // Required if generating Jackson 2 annotations
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'

    // why was this missing? needed to compile with jsonschema2pojo
    compile 'javax.annotation:javax.annotation-api:1.2'

    // explicitly include to make proguard less grumpy
    compile 'org.joda:joda-convert:1.8.1' // needed whether joda-time used or not

    compile 'com.google.code.findbugs:jsr305:3.0.1' // annotations

    // bean validation

    // missing on android; use jarjar to include on javax

    //jarjar 'com.sun.xml.fastinfoset:FastInfoset:1.2.12'
    //jarjar 'com.sun.istack:istack-commons-runtime:2.16'
    jarjar 'javax.xml.bind:jaxb-api:2.2.7'
    //jarjar 'com.sun.xml.bind:jaxb-impl:2.2.7'
    //jarjar 'com.sun.xml.bind:jaxb-core:2.2.7'
    jarjar 'javax.xml.stream:stax-api:1.0-2'
    //jarjar 'stax:stax:1.2.0'
    jarjar 'com.sun.el:el-ri:1.0' // for message interpolator (could remove if use our own)

    // validator lib
    jarjar ('org.hibernate:hibernate-validator:5.1.3.Final') {
        exclude module: 'test-utils'
        //exclude module: 'cdi'
        exclude module: 'tck-runner'
        exclude module: 'intergration'
        exclude module: 'annotation-processor'
        exclude module: 'performance'

        exclude group: 'javax.validation', module: 'validation-api'
    }

    // validation deps
    jarjar 'com.fasterxml:classmate:1.0.0'
    jarjar 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    jarjar 'javax.el:javax.el-api:2.2.4'
    jarjar 'org.glassfish.web:javax.el:2.2.4'
    jarjar 'javax.enterprise:cdi-api:1.2'
    jarjar 'javax.xml.bind:activation:1.0.2'

    //////////////////////
    // necessary without proguard shrinking, but may crash at launch < SDK 14 (see multidex docs)
    //compile 'com.android.support:multidex:1.0.1'

    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'

}

// Each configuration is set to the default value
jsonSchema2Pojo {
    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = false

    // Whether to use primitives (long, double, boolean) instead of wrapper types where possible
    // when generating bean properties (has the side-effect of making those properties non-null).
    usePrimitives = false

    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    //source = files("${sourceSets.main.output.resourcesDir}/json")
    source = files("src/main/assets/json/schemas")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    //targetDirectory = file("${project.buildDir}/generated-sources/js2p")
    targetDirectory = file("${project.buildDir}/generated/source/js2p")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'com.azavea.prs.driver.schemas'

    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
    propertyWordDelimiters = [' ','_'] as char[]

    // Whether to use the java type long (or Long) instead of int (or Integer) when representing the
    // JSON Schema type 'integer'.
    useLongIntegers = false

    // Whether to use the java type double (or Double) instead of float (or Float) when representing
    // the JSON Schema type 'number'.
    useDoubleNumbers = true

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = true

    // Whether to include a toString method in generated Java types.
    includeToString = true

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jackson1 (apply annotations from the Jackson 1.x library)
    //  - gson (apply annotations from the Gson library)
    //  - none (apply no annotations at all)
    annotationStyle = 'gson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.NoopAnnotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    // customAnnotator = 'org.jsonschema2pojo.Jackson2Annotator'
    //customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    customAnnotator = 'org.jsonschema2pojo.JsonEditorAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = true

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of json data)
    //  - json (documents that represent an example of the kind of json data that the generated Java types
    //          will be mapped to)
    sourceType = 'jsonschema'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = true

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals,
    // hashCode and toString methods.
    useCommonsLang3 = false

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // **EXPERIMENTAL** Whether to make the generated types Parcelable for Android
    // parcelable = false
}

jarjar {
    // required, path to the executable .jar file
    jarJarFile 'jarjar-1.3.jar'

    // optional, the rules for the jarjar tool
    rules = [
            'rule javax.xml.stream.** ext.javax.xml.stream.@1',
            'rule javax.xml.bind.** ext.javax.xml.bind.@1'
    ]

    // optional, exclude files from the dependency .jar files
    srcExcludes = ['META-INF/**']

    // optional, default is build_repackaged.jar, the result .jar file name
    outputName "build_repackaged.jar"

    // optional, default is libs, the directory of the result .jar
    outputDir 'libs'

    // optional, default is false
    ignoreJarJarResult false
}

dependencies {
    compile 'com.google.android.gms:play-services-appindexing:8.1.0'
}